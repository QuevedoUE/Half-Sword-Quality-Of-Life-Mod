#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Selector

#include "Basic.hpp"

#include "UI_Selector_classes.hpp"
#include "UI_Selector_parameters.hpp"


namespace SDK
{

// Function UI_Selector.UI_Selector_C.AddOption
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             NewOption                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_Selector_C::AddOption(const class FText& NewOption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "AddOption");

	Params::UI_Selector_C_AddOption Parms{};

	Parms.NewOption = std::move(NewOption);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Selector.UI_Selector_C.AddOptions(Name)
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     Param_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_Selector_C::AddOptions_Name_(TArray<class FName>& Param_Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "AddOptions(Name)");

	Params::UI_Selector_C_AddOptions_Name_ Parms{};

	Parms.Param_Options = std::move(Param_Options);

	UObject::ProcessEvent(Func, &Parms);

	Param_Options = std::move(Parms.Param_Options);
}


// Function UI_Selector.UI_Selector_C.AddOptions(String)
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   Param_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_Selector_C::AddOptions_String_(TArray<class FString>& Param_Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "AddOptions(String)");

	Params::UI_Selector_C_AddOptions_String_ Parms{};

	Parms.Param_Options = std::move(Param_Options);

	UObject::ProcessEvent(Func, &Parms);

	Param_Options = std::move(Parms.Param_Options);
}


// Function UI_Selector.UI_Selector_C.AddOptions(Text)
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>                     Param_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_Selector_C::AddOptions_Text_(TArray<class FText>& Param_Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "AddOptions(Text)");

	Params::UI_Selector_C_AddOptions_Text_ Parms{};

	Parms.Param_Options = std::move(Param_Options);

	UObject::ProcessEvent(Func, &Parms);

	Param_Options = std::move(Parms.Param_Options);
}


// Function UI_Selector.UI_Selector_C.BndEvt__btn_left_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_Selector_C::BndEvt__btn_left_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "BndEvt__btn_left_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_Selector.UI_Selector_C.BndEvt__btn_right_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_Selector_C::BndEvt__btn_right_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "BndEvt__btn_right_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_Selector.UI_Selector_C.BndEvt__Slider_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature
// (BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_Selector_C::BndEvt__Slider_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "BndEvt__Slider_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature");

	Params::UI_Selector_C_BndEvt__Slider_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Selector.UI_Selector_C.ChangeValue
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_bShouldFocus                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_Selector_C::ChangeValue(double Value, bool Param_bShouldFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "ChangeValue");

	Params::UI_Selector_C_ChangeValue Parms{};

	Parms.Value = Value;
	Parms.Param_bShouldFocus = Param_bShouldFocus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Selector.UI_Selector_C.ClearOptions
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_Selector_C::ClearOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "ClearOptions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_Selector.UI_Selector_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UUI_Selector_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_Selector.UI_Selector_C.ExecuteUbergraph_UI_Selector
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_Selector_C::ExecuteUbergraph_UI_Selector(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "ExecuteUbergraph_UI_Selector");

	Params::UI_Selector_C_ExecuteUbergraph_UI_Selector Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Selector.UI_Selector_C.FocusThisWidget
// (BlueprintCallable, BlueprintEvent)

void UUI_Selector_C::FocusThisWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "FocusThisWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_Selector.UI_Selector_C.FocusWithMouseWheel
// (BlueprintCallable, BlueprintEvent)

void UUI_Selector_C::FocusWithMouseWheel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "FocusWithMouseWheel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_Selector.UI_Selector_C.getFocusedOrUnfocusedColor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bChangeSliderColorWhenFocused                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_bChangeTextColorWhenFocused                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USlider*                          Param_Slider                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UImage*                           ImgLeftButton                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UImage*                           ImgRightButton                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UWidget*                          Param_SliderTitle                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UWidget*                          Param_SliderValue                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    bSetMargin                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateBrush                      LeftButtonColor                                        (Parm, OutParm)
// struct FSlateBrush                      RightButtonColor                                       (Parm, OutParm)

void UUI_Selector_C::GetFocusedOrUnfocusedColor(bool bChangeSliderColorWhenFocused, bool Param_bChangeTextColorWhenFocused, class USlider* Param_Slider, class UImage* ImgLeftButton, class UImage* ImgRightButton, class UWidget* Param_SliderTitle, class UWidget* Param_SliderValue, bool bSetMargin, struct FSlateBrush* LeftButtonColor, struct FSlateBrush* RightButtonColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "getFocusedOrUnfocusedColor");

	Params::UI_Selector_C_GetFocusedOrUnfocusedColor Parms{};

	Parms.bChangeSliderColorWhenFocused = bChangeSliderColorWhenFocused;
	Parms.Param_bChangeTextColorWhenFocused = Param_bChangeTextColorWhenFocused;
	Parms.Param_Slider = Param_Slider;
	Parms.ImgLeftButton = ImgLeftButton;
	Parms.ImgRightButton = ImgRightButton;
	Parms.Param_SliderTitle = Param_SliderTitle;
	Parms.Param_SliderValue = Param_SliderValue;
	Parms.bSetMargin = bSetMargin;

	UObject::ProcessEvent(Func, &Parms);

	if (LeftButtonColor != nullptr)
		*LeftButtonColor = std::move(Parms.LeftButtonColor);

	if (RightButtonColor != nullptr)
		*RightButtonColor = std::move(Parms.RightButtonColor);
}


// Function UI_Selector.UI_Selector_C.getLeftButtonSettings
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FSlateBrush UUI_Selector_C::GetLeftButtonSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "getLeftButtonSettings");

	Params::UI_Selector_C_GetLeftButtonSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UI_Selector.UI_Selector_C.getRightButtonSettings
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FSlateBrush UUI_Selector_C::GetRightButtonSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "getRightButtonSettings");

	Params::UI_Selector_C_GetRightButtonSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UI_Selector.UI_Selector_C.GetSelectedOption
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SelectedIndex                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             SelectedOption                                         (Parm, OutParm)

void UUI_Selector_C::GetSelectedOption(int32* SelectedIndex, class FText* SelectedOption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "GetSelectedOption");

	Params::UI_Selector_C_GetSelectedOption Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SelectedIndex != nullptr)
		*SelectedIndex = Parms.SelectedIndex;

	if (SelectedOption != nullptr)
		*SelectedOption = std::move(Parms.SelectedOption);
}


// Function UI_Selector.UI_Selector_C.getTxtValue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText UUI_Selector_C::GetTxtValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "getTxtValue");

	Params::UI_Selector_C_GetTxtValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UI_Selector.UI_Selector_C.OnMouseButtonDoubleClick
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        InMyGeometry                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    InMouseEvent                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UUI_Selector_C::OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "OnMouseButtonDoubleClick");

	Params::UI_Selector_C_OnMouseButtonDoubleClick Parms{};

	Parms.InMyGeometry = std::move(InMyGeometry);
	Parms.InMouseEvent = std::move(InMouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UI_Selector.UI_Selector_C.OnMouseEnter
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_Selector_C::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "OnMouseEnter");

	Params::UI_Selector_C_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Selector.UI_Selector_C.OnMouseLeave
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_Selector_C::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "OnMouseLeave");

	Params::UI_Selector_C_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Selector.UI_Selector_C.OnMouseWheel
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UUI_Selector_C::OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "OnMouseWheel");

	Params::UI_Selector_C_OnMouseWheel Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UI_Selector.UI_Selector_C.OnOptionChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OptionIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             OptionText                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UUI_Selector_C::OnOptionChanged__DelegateSignature(int32 OptionIndex, const class FText& OptionText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "OnOptionChanged__DelegateSignature");

	Params::UI_Selector_C_OnOptionChanged__DelegateSignature Parms{};

	Parms.OptionIndex = OptionIndex;
	Parms.OptionText = std::move(OptionText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Selector.UI_Selector_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_Selector_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "PreConstruct");

	Params::UI_Selector_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Selector.UI_Selector_C.RemoveOption
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Item                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_Selector_C::RemoveOption(const class FText& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "RemoveOption");

	Params::UI_Selector_C_RemoveOption Parms{};

	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Selector.UI_Selector_C.ResetDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UUI_Selector_C::ResetDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "ResetDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_Selector.UI_Selector_C.ResetSlider
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bShouldFocus                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResetThisSlider                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_Selector_C::ResetSlider(bool Param_bShouldFocus, bool bResetThisSlider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "ResetSlider");

	Params::UI_Selector_C_ResetSlider Parms{};

	Parms.Param_bShouldFocus = Param_bShouldFocus;
	Parms.bResetThisSlider = bResetThisSlider;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Selector.UI_Selector_C.ResetSliderFocus
// (BlueprintCallable, BlueprintEvent)

void UUI_Selector_C::ResetSliderFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "ResetSliderFocus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_Selector.UI_Selector_C.SetDefaultOptionByIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DefaultIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_Selector_C::SetDefaultOptionByIndex(int32 DefaultIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "SetDefaultOptionByIndex");

	Params::UI_Selector_C_SetDefaultOptionByIndex Parms{};

	Parms.DefaultIndex = DefaultIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Selector.UI_Selector_C.SetDefaultOptionByName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             ItemToFind                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_Selector_C::SetDefaultOptionByName(const class FText& ItemToFind, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "SetDefaultOptionByName");

	Params::UI_Selector_C_SetDefaultOptionByName Parms{};

	Parms.ItemToFind = std::move(ItemToFind);

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function UI_Selector.UI_Selector_C.SetSliderFocus
// (BlueprintCallable, BlueprintEvent)

void UUI_Selector_C::SetSliderFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Selector_C", "SetSliderFocus");

	UObject::ProcessEvent(Func, nullptr);
}

}

